'use strict';

var Queue = require('queue');
var request = require('request');
var responseHandler = require('./responseHandler');

var protocol = 'http://';
var host = 'localhost:3005'
var matchListEndpoint = host + '/matchList';
var summonerEndpoint = host + '/summoner/profile';
//var gameEndpoint = host + '/game';

var requestQueue = new Queue();
requestQueue.concurrency = 10;

function get(options) {
    // Build the full URL with the API key.
    var getOptions = {
        url: `${options.url}`
    };

    // Push the message into the queue and let it get processed asynchronously.
    requestQueue.push(function (done) {
        request.get(getOptions, function (error, response, body) {
            // Let the response handler parse what the app ends up getting back.
            responseHandler(error, response, body, options);
            done();
        });
    });

    // This will start the queue if it isn't already handling requests.
    requestQueue.start();
}

function matchList(summoner_name, region, callback) {
    var url = `http://localhost:3005/summoner/profile/na/Guromin`;
    //var url = `${protocol}${matchListEndpoint}/${region}/${summoner_name}`;
    get({ url: url, callback: callback });
}

function summonerSearch(summonerName, region, callback) {
    //var url = `http://localhost:3001/games?summonerId=123451&region=na&gameType=ranked&limit=10&api_key=irelia-numba-one`;
    //var url = `http://localhost:3005/summoner/profile/na/Guromin`;
    var url = `${protocol}${summonerEndpoint}/${region}/${summonerName}`;
    console.log(url);
    get({ url: url, callback: callback });
}

function gameSearch(gameId, region, callback) {
    var url = `${protocol}${gameEndpoint}?gameId=${gameId}&region=${region}`;
    get({ url: url, callback: callback });
}

function getChampions(callback){
    var champions = {}
    return request.get("http://ddragon.leagueoflegends.com/cdn/6.24.1/data/en_US/champion.json",
    function (error, response, body) {
        let responseData = (typeof body === 'string') ? JSON.parse(body) : body;
        for (var championKey in responseData.data) {
            var champion = responseData["data"][championKey];
            champions[champion.key] = {
                "idName": champion.id,
                "displayName": champion.name,
                "id": champion.key
            }
        }
        return callback(champions);
    });
}

module.exports = {
    matchList: matchList,
    summonerSearch: summonerSearch,
    gameSearch: gameSearch,
    getChampions: getChampions
};
